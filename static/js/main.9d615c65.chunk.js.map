{"version":3,"sources":["Pokemon.js","data.js","Summary.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","state","color","onClick","isSummary","onPokemonClick","id","style","background","this","padding","margin","name","src","React","Component","pokemons","type","base_experience","Summary","App","selectedPokemon","bind","find","pokemon","setState","className","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNA4BeA,E,YAzBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,MAAO,QAHG,E,sEAOT,IAAD,OACJ,OAAO,wBACHC,QAAS,WACD,EAAKH,MAAMI,WACX,EAAKJ,MAAMK,eAAe,EAAKL,MAAMM,KAI7CC,MAAO,CAACC,WAAWC,KAAKR,MAAMC,MAAOQ,QAAQ,OAAQC,OAAQ,SAC7D,4BAAKF,KAAKT,MAAMY,MAChB,4BACI,yBACIC,IAAG,mFAA8EJ,KAAKT,MAAMM,GAAzF,gB,GApBDQ,IAAMC,WCWbC,EAbE,CACb,CAAEV,GAAI,EAAGM,KAAM,aAAcK,KAAM,OAAQC,gBAAiB,IAC5D,CAAEZ,GAAI,EAAGM,KAAM,WAAYK,KAAM,QAASC,gBAAiB,IAC3D,CAAEZ,GAAI,GAAIM,KAAM,UAAWK,KAAM,MAAOC,gBAAiB,IACzD,CAAEZ,GAAI,GAAIM,KAAM,aAAcK,KAAM,SAAUC,gBAAiB,KAC/D,CAAEZ,GAAI,GAAIM,KAAM,UAAWK,KAAM,WAAYC,gBAAiB,KAC9D,CAAEZ,GAAI,GAAIM,KAAM,aAAcK,KAAM,SAAUC,gBAAiB,IAC/D,CAAEZ,GAAI,GAAIM,KAAM,SAAUK,KAAM,SAAUC,gBAAiB,KAC3D,CAAEZ,GAAI,IAAKM,KAAM,QAASK,KAAM,SAAUC,gBAAiB,KCAhDC,E,iLAHP,OAAO,kBAAC,EAAD,iBAAaV,KAAKT,MAAlB,CAAyBI,WAAW,S,GAF7BU,IAAMC,WCoCbK,E,YAhCX,WAAYpB,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACToB,iBAAiB,GAGrB,EAAKhB,eAAiB,EAAKA,eAAeiB,KAApB,gBANR,E,4EASHhB,GACX,IAAMe,EAAkBL,EAASO,MAAK,SAACC,GACnC,OAAOA,EAAQlB,KAAOA,KAE1BG,KAAKgB,SAAS,CACVJ,sB,+BAIC,IAAD,OACJ,OACI,yBAAKK,UAAU,OACVjB,KAAKR,MAAMoB,iBAAmB,kBAAC,EAAYZ,KAAKR,MAAMoB,iBAEnDL,EAASW,KAAI,SAACC,GACV,OAAO,kBAAC,EAAD,iBAAaA,EAAb,CAAmBvB,eAAgB,EAAKA,eAAgBwB,IAAKD,EAAKtB,c,GAzB9EQ,IAAMC,WCMLe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9d615c65.chunk.js","sourcesContent":["import React from 'react';\n\nclass Pokemon extends React.Component {   // Standart böyle yazmalıyız.\n    constructor(props){ //props: bir componentten başka bir comp e veri aktarımını sağlar.\n        super(props);\n        this.state = {\n            color: \"pink\" //arka planını değştirdik. bir karakterin bulunduğu kısım component olur.\n        };\n    }\n\n    render(){\n        return <ul\n            onClick={() => {\n                if(!this.props.isSummary){ //ÖNEMLİ: summary.js de  <Pokemon {...this.props} isSummary={true}></Pokemon> burada bütün elemanlar var. !this olan kısım ilk elemanı gösterir. ona tıklanınca bi şey yapma geri kalanı için aşağıdaki komutu çalıştır.\n                    this.props.onPokemonClick(this.props.id);\n                    //console.log(\"jfdskvv\"); buda ilk resim dışında çalışıyor. buradan anla\n                }\n            }}\n            style={{background:this.state.color, padding:\"15px\", margin: \"10px\"}}>\n            <li>{this.props.name}</li>\n            <li>\n                <img\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.props.id}.png`} //$ yazınca işlemlerden geliyo id.\n                />\n            </li>\n        </ul>\n    }\n}\nexport default Pokemon;\n","const pokemons = [\n    { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n    { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n    { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n    { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n    { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n    { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n    { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n    { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n];\n/**\n * Created by mehmetyurtar on 11/9/19.\n */\nexport default pokemons;","import React from 'react';\nimport Pokemon from \"./Pokemon\";\n\nclass Summary extends React.Component {\n    render(){\n        return <Pokemon {...this.props} isSummary={true}></Pokemon>\n    }\n}\nexport default Summary;\n","import React from 'react';\nimport Pokemon from './Pokemon';\nimport pokemons from \"./data\";\nimport Summary from \"./Summary\";\n\n\nclass App extends  React.Component { //react.comp bir kütüphanedir. dahil edince istediğin componente ayırmayı sağlar.\n    constructor(props){\n        super(props);  //hazır gelir. kütüphaneden dolayı.\n        this.state = {\n            selectedPokemon: false\n        };\n\n        this.onPokemonClick = this.onPokemonClick.bind(this);\n    }\n\n    onPokemonClick(id){\n        const selectedPokemon = pokemons.find((pokemon) => {\n            return pokemon.id === id;\n        });\n        this.setState({  //find dan sonra tıkladığımız id ile data.js deki id birbirine eşitleniyor.o id bizim pokemonumuz oluyor. set işaret etmek.\n            selectedPokemon\n        });\n    }\n\n    render(){ \n        return (\n            <div className=\"App\">\n                {this.state.selectedPokemon && <Summary {...this.state.selectedPokemon}/>} \n                {\n                    pokemons.map((item) => {\n                        return <Pokemon {...item} onPokemonClick={this.onPokemonClick} key={item.id}/>\n                    })\n                }\n            </div>\n        );\n    }\n}\n//yukarda {...this.state.selectedPokemon}/>} kısmı bütün pokemonları seçer. map ile hepsini yazdırdık.\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// 7. satıra kadar olan kod parçağını yazmalısın. Çünkü değişmiyor standar kod.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));   // Burada index html deki id'yi çekiyoruz\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}